import { useState, useRef, useEffect } from 'react';
import { io } from 'socket.io-client';

const useWebRTC = () => {
  // State hooks for managing local and remote media streams and call status
  const [localStream, setLocalStream] = useState<MediaStream | null>(null);
  const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
  const [incomingCall, setIncomingCall] = useState(false); // Indicates an incoming call
  const [isCaller, setIsCaller] = useState(false); // Indicates if the user initiated the call
  const peerConnection = useRef<RTCPeerConnection | null>(null); // Ref to hold the RTCPeerConnection object

  // Set up the socket connection with the server, including credentials and headers for CORS
  const socket = useRef(io('https://192.168.1.156:8080', {
    withCredentials: true,
    extraHeaders: {
      "Access-Control-Allow-Origin": "https://192.168.1.156:5173"
    }
  })).current;

  // Effect hook to handle socket events
  useEffect(() => {
    // Listen for a new offer from the server, indicating an incoming call
    socket.on('newOfferAwaiting', async (offer) => {
      setIncomingCall(true);
      setIsCaller(false); // Mark as the receiver
    });

    // Listen for an answer to the sent offer
    socket.on('answerResponse', async (answer) => {
      if (peerConnection.current) {
        await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));
      }
    });

    // Listen for received ICE candidates from the server
    socket.on('receivedIceCandidateFromServer', async (candidate) => {
      if (peerConnection.current) {
        await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
      }
    });

    // Clean up socket connection on component unmount
    return () => {
      socket.disconnect();
    };
  }, [socket]);

  // Function to start the local media stream
  const startLocalStream = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      setLocalStream(stream); // Set the local stream state
      return stream;
    } catch (error) {
      console.error('Error accessing media devices.', error);
    }
  };

  // Function to initiate a call
  const call = async () => {
    setIsCaller(true); // Mark the user as the caller
    const stream = await startLocalStream();
    if (!stream) return;

    // Initialize a new RTCPeerConnection with STUN servers
    peerConnection.current = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    });

    // Add the local stream tracks to the peer connection
    stream.getTracks().forEach((track) => {
      peerConnection.current?.addTrack(track, stream);
    });

    // Handle ICE candidates generated by the peer connection
    peerConnection.current.onicecandidate = (event) => {
      if (event.candidate) {
        socket.emit('sendIceCandidate', event.candidate);
      }
    };

    // Set the remote stream when it is received
    peerConnection.current.ontrack = (event) => {
      setRemoteStream(event.streams[0]);
    };

    try {
      // Create and send an offer to the server
      const offer = await peerConnection.current.createOffer();
      await peerConnection.current.setLocalDescription(offer);
      socket.emit('newOffer', offer);
    } catch (error) {
      console.error('Error creating offer.', error);
    }
  };

  // Function to answer an incoming offer
  const answerOffer = async () => {
    const stream = await startLocalStream();
    if (!stream) return;

    // Initialize a new RTCPeerConnection with STUN servers
    peerConnection.current = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    });

    // Add the local stream tracks to the peer connection
    stream.getTracks().forEach((track) => {
      peerConnection.current?.addTrack(track, stream);
    });

    // Handle ICE candidates generated by the peer connection
    peerConnection.current.onicecandidate = (event) => {
      if (event.candidate) {
        socket.emit('sendIceCandidate', event.candidate);
      }
    };

    // Set the remote stream when it is received
    peerConnection.current.ontrack = (event) => {
      setRemoteStream(event.streams[0]);
    };

    try {
      // Handle the incoming offer (this would typically be provided as an argument or through state)
      // Example: `const offer = getOfferFromSomewhere();`
      // await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await peerConnection.current.createAnswer();
      await peerConnection.current.setLocalDescription(answer);
      socket.emit('newAnswer', answer);
      setIncomingCall(false); // Reset the incoming call state
    } catch (error) {
      console.error('Error answering call.', error);
    }
  };

  // Return the necessary state and functions for managing WebRTC calls
  return { localStream, remoteStream, call, answerCall: answerOffer, incomingCall, isCaller };
};

export default useWebRTC;
